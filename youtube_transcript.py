# -*- coding: utf-8 -*-
"""Youtube_Transcript.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ta29shwcK6i5QrG_yROlaz0WHfy7fZrg
"""

!pip install -q youtube-transcript-api langchain-community langchain-ollama faiss-cpu tiktoken python-dotenv langchain-google-genai
!pip install --upgrade --quiet  pytube

import os
os.environ["GOOGLE_API_KEY"] =""

from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_ollama import OllamaEmbeddings , ChatOllama
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import GoogleGenerativeAIEmbeddings,ChatGoogleGenerativeAI
from langchain_community.document_loaders import YoutubeLoader

video_id = "SfOaZIGJ_gs"
try:
  transcripts = YouTubeTranscriptApi().fetch(video_id, languages=["en"])

  # Join text (works whether dict or object)
  final_text = " ".join(
      chunk["text"] if isinstance(chunk, dict) else chunk.text
      for chunk in transcripts
  )
  print(final_text)

except TranscriptsDisabled:
  print("No captions available for video")

splitter = RecursiveCharacterTextSplitter(chunk_size=100, chunk_overlap=20)
chunks = splitter.create_documents([final_text])

len(chunks)

embeddings = GoogleGenerativeAIEmbeddings(model="models/gemini-embedding-001")
vector_store = FAISS.from_documents(chunks, embeddings)

vector_store.index_to_docstore_id

"""**Retriveral**"""

from re import search
retriver = vector_store.as_retriever(search_type="similarity", search_kwargs={"k":4})

retriver.invoke("what is gpt-5 and how can i build it top on it")

"""**Augumentation**"""

llm = llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash",
    temperature=1,
    max_tokens=None,
    timeout=None
)

prompt = PromptTemplate.from_template("You are a helpful assistance.Answer ONLY from the provided transcript content.If the context is insufficinent, just say you don't know.{context} Question: {question}")

question = "is the topic of gpt-5 discussed in the video? if yes then what was discussed"
retrieval_docs = retriver.invoke(question)

context_text = "\n\n".join(docs.page_content for docs in retrieval_docs)
context_text

final_prompt = prompt.invoke({"context":context_text,"question":question})

llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash",
    temperature=1,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

answer = llm.invoke(final_prompt)
print(answer.content)

"""Building a chain

"""

from langchain_core.runnables import RunnableParallel, RunnablePassthrough, RunnableLambda
from langchain_core.output_parsers import StrOutputParser

def formate_docs(retrieval_docs):
  context_text = "\n\n".join(docs.page_content for docs in retrieval_docs)
  return context_text

parallel_chain = RunnableParallel({
    'context' : retriver | RunnableLambda(formate_docs),
    'question' : RunnablePassthrough()
})

parallel_chain.invoke("what is gpt-5")

parser = StrOutputParser()

main_chain = parallel_chain | prompt| llm | parser

main_chain.invoke("can you summarize the video")

# Replace with your GitHub email & username
!git config --global user.email "yepitansh2@gmail.com"
!git config --global user.name "ansh-pachauri"

!git clone https://github.com/ansh-pachauri/GenAI-project-on-collab.git

!git add .
!git commit -m "ðŸš€ Commit from Google Colab"
!git branch -M main
!git push origin main

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/GenAI-project-on-collab
!git add .
!git commit -m "Initial commit from Google Colab"
!git branch -M main
!git push https://your_username:your_token@github.com/your_username/your_repo.git main

